// <auto-generated />
using System;
using AccountManagement.Infrastructure.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountManagement.Infrastructure.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(AmContext))]
    [Migration("20240128182139_InitialAm")]
    partial class InitialAm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Physioline.Framework.Domain.BaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Person", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("People", "AM");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.SpecializedTitle", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("SpecializedTitles", "AM");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.User", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Password")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasFilter("[Identifier] IS NOT NULL");

                    b.HasIndex("Mobile")
                        .IsUnique()
                        .HasFilter("[Mobile] IS NOT NULL");

                    b.ToTable("Users", "AM");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("AccountManagement.Domain.Entities.Person");

                    b.ToTable("Admins", "AM");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Client", b =>
                {
                    b.HasBaseType("AccountManagement.Domain.Entities.Person");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasIndex("NationalCode")
                        .IsUnique()
                        .HasFilter("[NationalCode] IS NOT NULL");

                    b.ToTable("Clients", "AM");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Expert", b =>
                {
                    b.HasBaseType("AccountManagement.Domain.Entities.Person");

                    b.Property<string>("MedicalSystemCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<long>("SpecializedTitleId")
                        .HasColumnType("bigint");

                    b.HasIndex("NationalCode")
                        .IsUnique()
                        .HasFilter("[NationalCode] IS NOT NULL");

                    b.HasIndex("SpecializedTitleId");

                    b.ToTable("Experts", "AM");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Person", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("AccountManagement.Domain.Entities.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountManagement.Domain.Entities.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("AccountManagement.Domain.Entities.Person", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.SpecializedTitle", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("AccountManagement.Domain.Entities.SpecializedTitle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("AccountManagement.Domain.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Admin", b =>
                {
                    b.HasOne("AccountManagement.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("AccountManagement.Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Client", b =>
                {
                    b.HasOne("AccountManagement.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("AccountManagement.Domain.Entities.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.Expert", b =>
                {
                    b.HasOne("AccountManagement.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("AccountManagement.Domain.Entities.Expert", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountManagement.Domain.Entities.SpecializedTitle", "SpecializedTitle")
                        .WithMany("Experts")
                        .HasForeignKey("SpecializedTitleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SpecializedTitle");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.SpecializedTitle", b =>
                {
                    b.Navigation("Experts");
                });

            modelBuilder.Entity("AccountManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
