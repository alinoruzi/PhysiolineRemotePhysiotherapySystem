// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TreatmentManagement.Infrastructure.EntityFrameworkCore;

#nullable disable

namespace TreatmentManagement.Infrastructure.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(TMContext))]
    [Migration("20240109184326_InitialTM")]
    partial class InitialTM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Physioline.Framework.Domain.BaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EditorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionCategorization", b =>
                {
                    b.Property<long>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CollectionCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("CollectionId", "CollectionCategoryId");

                    b.HasIndex("CollectionCategoryId");

                    b.ToTable("CollectionCategorizations", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseCategorization", b =>
                {
                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExerciseCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("ExerciseId", "ExerciseCategoryId");

                    b.HasIndex("ExerciseCategoryId");

                    b.ToTable("ExerciseCategorizations", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Collection", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Collections", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionCategory", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("ParentId");

                    b.ToTable("CollectionCategories", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionDetail", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<long>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberPerDuration")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<long>("SecondsOfDuration")
                        .HasColumnType("bigint");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("CollectionDetails", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Exercise", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Exercises", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseCategory", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("ParentId");

                    b.ToTable("ExerciseCategories", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseFile", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<long?>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseFiles", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Plan", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<long>("ExpertId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Plans", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.PlanDetail", b =>
                {
                    b.HasBaseType("Physioline.Framework.Domain.BaseEntity");

                    b.Property<long>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndCollection")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartCollection")
                        .HasColumnType("datetime2");

                    b.HasIndex("CollectionId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanDetails", "TM");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionCategorization", b =>
                {
                    b.HasOne("TreatmentManagement.Domain.Entities.CollectionCategory", "CollectionCategory")
                        .WithMany("Categorizations")
                        .HasForeignKey("CollectionCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreatmentManagement.Domain.Entities.Collection", "Collection")
                        .WithMany("Categorizations")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("CollectionCategory");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseCategorization", b =>
                {
                    b.HasOne("TreatmentManagement.Domain.Entities.ExerciseCategory", "ExerciseCategory")
                        .WithMany("Categorizations")
                        .HasForeignKey("ExerciseCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreatmentManagement.Domain.Entities.Exercise", "Exercise")
                        .WithMany("Categorizations")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseCategory");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Collection", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.Collection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionCategory", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.CollectionCategory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreatmentManagement.Domain.Entities.CollectionCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionDetail", b =>
                {
                    b.HasOne("TreatmentManagement.Domain.Entities.Collection", "Collection")
                        .WithMany("Details")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreatmentManagement.Domain.Entities.Exercise", "Exercise")
                        .WithMany("Collections")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.CollectionDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.Exercise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TreatmentManagement.Domain.ValueObjects.ExerciseGuideReference", "GuideReferences", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<long>("ExerciseId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(2500)
                                .HasColumnType("nvarchar(2500)");

                            b1.HasKey("Id");

                            b1.HasIndex("ExerciseId");

                            b1.ToTable("ExerciseGuideReference", "TM");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId");
                        });

                    b.Navigation("GuideReferences");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseCategory", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.ExerciseCategory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreatmentManagement.Domain.Entities.ExerciseCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseFile", b =>
                {
                    b.HasOne("TreatmentManagement.Domain.Entities.Exercise", "Exercise")
                        .WithMany("Files")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.ExerciseFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Plan", b =>
                {
                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.Plan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.PlanDetail", b =>
                {
                    b.HasOne("TreatmentManagement.Domain.Entities.Collection", "Collection")
                        .WithMany("Plans")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Physioline.Framework.Domain.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TreatmentManagement.Domain.Entities.PlanDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreatmentManagement.Domain.Entities.Plan", "Plan")
                        .WithMany("Details")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("TreatmentManagement.Domain.ValueObjects.PlanDetailWeekDay", "WeekDays", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<string>("DayOfWeek")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<long>("PlanDetailId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("PlanDetailId");

                            b1.ToTable("PlanDetailWeekDay", "TM");

                            b1.WithOwner()
                                .HasForeignKey("PlanDetailId");
                        });

                    b.Navigation("Collection");

                    b.Navigation("Plan");

                    b.Navigation("WeekDays");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Collection", b =>
                {
                    b.Navigation("Categorizations");

                    b.Navigation("Details");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.CollectionCategory", b =>
                {
                    b.Navigation("Categorizations");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("Categorizations");

                    b.Navigation("Collections");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.ExerciseCategory", b =>
                {
                    b.Navigation("Categorizations");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("TreatmentManagement.Domain.Entities.Plan", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
